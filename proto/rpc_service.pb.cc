// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rpc_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace adaptive_system {
class EmptyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Empty> {
} _Empty_default_instance_;
class TuplePaLrItvDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TuplePaLrItv> {
} _TuplePaLrItv_default_instance_;
class QuantizationLevelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<QuantizationLevel> {
} _QuantizationLevel_default_instance_;
class GradientDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Gradient> {
} _Gradient_default_instance_;
class PartialStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PartialState> {
} _PartialState_default_instance_;
class GradientAndLossDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GradientAndLoss> {
} _GradientAndLoss_default_instance_;
class PartialStateAndLossDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PartialStateAndLoss> {
} _PartialStateAndLoss_default_instance_;

namespace protobuf_rpc_5fservice_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuplePaLrItv, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuplePaLrItv, parameter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuplePaLrItv, lr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuplePaLrItv, interval_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuantizationLevel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuantizationLevel, level_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gradient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gradient, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gradient, tensor_ge_8_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gradient, tensor_le_8_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gradient, max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gradient, min_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartialState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartialState, tensor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GradientAndLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GradientAndLoss, grad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GradientAndLoss, loss_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartialStateAndLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartialStateAndLoss, ps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartialStateAndLoss, loss_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Empty)},
  { 4, -1, sizeof(TuplePaLrItv)},
  { 11, -1, sizeof(QuantizationLevel)},
  { 16, -1, sizeof(Gradient)},
  { 25, -1, sizeof(PartialState)},
  { 30, -1, sizeof(GradientAndLoss)},
  { 36, -1, sizeof(PartialStateAndLoss)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Empty_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TuplePaLrItv_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QuantizationLevel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Gradient_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PartialState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GradientAndLoss_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PartialStateAndLoss_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "rpc_service.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

}  // namespace

void TableStruct::Shutdown() {
  _Empty_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _TuplePaLrItv_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _QuantizationLevel_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Gradient_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _PartialState_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _GradientAndLoss_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _PartialStateAndLoss_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::tensorflow::protobuf_tensorflow_2fcore_2fframework_2ftensor_2eproto::InitDefaults();
  _Empty_default_instance_.DefaultConstruct();
  _TuplePaLrItv_default_instance_.DefaultConstruct();
  _QuantizationLevel_default_instance_.DefaultConstruct();
  _Gradient_default_instance_.DefaultConstruct();
  _PartialState_default_instance_.DefaultConstruct();
  _GradientAndLoss_default_instance_.DefaultConstruct();
  _PartialStateAndLoss_default_instance_.DefaultConstruct();
  _TuplePaLrItv_default_instance_.get_mutable()->parameter_ = const_cast< ::tensorflow::TensorProto*>(
      ::tensorflow::TensorProto::internal_default_instance());
  _Gradient_default_instance_.get_mutable()->tensor_ge_8_ = const_cast< ::tensorflow::TensorProto*>(
      ::tensorflow::TensorProto::internal_default_instance());
  _PartialState_default_instance_.get_mutable()->tensor_ = const_cast< ::tensorflow::TensorProto*>(
      ::tensorflow::TensorProto::internal_default_instance());
  _GradientAndLoss_default_instance_.get_mutable()->grad_ = const_cast< ::adaptive_system::Gradient*>(
      ::adaptive_system::Gradient::internal_default_instance());
  _PartialStateAndLoss_default_instance_.get_mutable()->ps_ = const_cast< ::adaptive_system::PartialState*>(
      ::adaptive_system::PartialState::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\021rpc_service.proto\022\017adaptive_system\032&te"
      "nsorflow/core/framework/tensor.proto\"\007\n\005"
      "Empty\"X\n\014TuplePaLrItv\022*\n\tparameter\030\001 \001(\013"
      "2\027.tensorflow.TensorProto\022\n\n\002lr\030\002 \001(\002\022\020\n"
      "\010interval\030\003 \001(\005\"E\n\021QuantizationLevel\0220\n\005"
      "level\030\001 \001(\0162!.adaptive_system.GRAD_QUANT"
      "_LEVEL\"\231\001\n\010Gradient\0220\n\005level\030\001 \001(\0162!.ada"
      "ptive_system.GRAD_QUANT_LEVEL\022,\n\013tensor_"
      "ge_8\030\002 \001(\0132\027.tensorflow.TensorProto\022\023\n\013t"
      "ensor_le_8\030\003 \001(\014\022\013\n\003max\030\004 \001(\002\022\013\n\003min\030\005 \001"
      "(\002\"7\n\014PartialState\022\'\n\006tensor\030\001 \001(\0132\027.ten"
      "sorflow.TensorProto\"H\n\017GradientAndLoss\022\'"
      "\n\004grad\030\001 \001(\0132\031.adaptive_system.Gradient\022"
      "\014\n\004loss\030\002 \001(\002\"N\n\023PartialStateAndLoss\022)\n\002"
      "ps\030\001 \001(\0132\035.adaptive_system.PartialState\022"
      "\014\n\004loss\030\002 \001(\002*G\n\020GRAD_QUANT_LEVEL\022\007\n\003TWO"
      "\020\000\022\010\n\004FOUR\020\001\022\t\n\005EIGHT\020\002\022\013\n\007SIXTEEN\020\003\022\010\n\004"
      "NONE\020\0042\373\001\n\rSystemControl\022F\n\rretrieveTupl"
      "e\022\026.adaptive_system.Empty\032\035.adaptive_sys"
      "tem.TuplePaLrItv\022K\n\014sendGradient\022 .adapt"
      "ive_system.GradientAndLoss\032\031.adaptive_sy"
      "stem.Gradient\022U\n\tsendState\022$.adaptive_sy"
      "stem.PartialStateAndLoss\032\".adaptive_syst"
      "em.QuantizationLevelb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 948);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rpc_service.proto", &protobuf_RegisterTypes);
  ::tensorflow::protobuf_tensorflow_2fcore_2fframework_2ftensor_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_rpc_5fservice_2eproto

const ::google::protobuf::EnumDescriptor* GRAD_QUANT_LEVEL_descriptor() {
  protobuf_rpc_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_5fservice_2eproto::file_level_enum_descriptors[0];
}
bool GRAD_QUANT_LEVEL_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Empty::Empty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:adaptive_system.Empty)
}
Empty::Empty(const Empty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:adaptive_system.Empty)
}

void Empty::SharedCtor() {
  _cached_size_ = 0;
}

Empty::~Empty() {
  // @@protoc_insertion_point(destructor:adaptive_system.Empty)
  SharedDtor();
}

void Empty::SharedDtor() {
}

void Empty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Empty::descriptor() {
  protobuf_rpc_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_5fservice_2eproto::file_level_metadata[0].descriptor;
}

const Empty& Empty::default_instance() {
  protobuf_rpc_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

Empty* Empty::New(::google::protobuf::Arena* arena) const {
  Empty* n = new Empty;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Empty::Clear() {
// @@protoc_insertion_point(message_clear_start:adaptive_system.Empty)
}

bool Empty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:adaptive_system.Empty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:adaptive_system.Empty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adaptive_system.Empty)
  return false;
#undef DO_
}

void Empty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adaptive_system.Empty)
  // @@protoc_insertion_point(serialize_end:adaptive_system.Empty)
}

::google::protobuf::uint8* Empty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:adaptive_system.Empty)
  // @@protoc_insertion_point(serialize_to_array_end:adaptive_system.Empty)
  return target;
}

size_t Empty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adaptive_system.Empty)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Empty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adaptive_system.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  const Empty* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Empty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adaptive_system.Empty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adaptive_system.Empty)
    MergeFrom(*source);
  }
}

void Empty::MergeFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adaptive_system.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void Empty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adaptive_system.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Empty::CopyFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adaptive_system.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Empty::IsInitialized() const {
  return true;
}

void Empty::Swap(Empty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Empty::InternalSwap(Empty* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Empty::GetMetadata() const {
  protobuf_rpc_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_5fservice_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Empty

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TuplePaLrItv::kParameterFieldNumber;
const int TuplePaLrItv::kLrFieldNumber;
const int TuplePaLrItv::kIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TuplePaLrItv::TuplePaLrItv()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:adaptive_system.TuplePaLrItv)
}
TuplePaLrItv::TuplePaLrItv(const TuplePaLrItv& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_parameter()) {
    parameter_ = new ::tensorflow::TensorProto(*from.parameter_);
  } else {
    parameter_ = NULL;
  }
  ::memcpy(&lr_, &from.lr_,
    reinterpret_cast<char*>(&interval_) -
    reinterpret_cast<char*>(&lr_) + sizeof(interval_));
  // @@protoc_insertion_point(copy_constructor:adaptive_system.TuplePaLrItv)
}

void TuplePaLrItv::SharedCtor() {
  ::memset(&parameter_, 0, reinterpret_cast<char*>(&interval_) -
    reinterpret_cast<char*>(&parameter_) + sizeof(interval_));
  _cached_size_ = 0;
}

TuplePaLrItv::~TuplePaLrItv() {
  // @@protoc_insertion_point(destructor:adaptive_system.TuplePaLrItv)
  SharedDtor();
}

void TuplePaLrItv::SharedDtor() {
  if (this != internal_default_instance()) {
    delete parameter_;
  }
}

void TuplePaLrItv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TuplePaLrItv::descriptor() {
  protobuf_rpc_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_5fservice_2eproto::file_level_metadata[1].descriptor;
}

const TuplePaLrItv& TuplePaLrItv::default_instance() {
  protobuf_rpc_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

TuplePaLrItv* TuplePaLrItv::New(::google::protobuf::Arena* arena) const {
  TuplePaLrItv* n = new TuplePaLrItv;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TuplePaLrItv::Clear() {
// @@protoc_insertion_point(message_clear_start:adaptive_system.TuplePaLrItv)
  if (GetArenaNoVirtual() == NULL && parameter_ != NULL) {
    delete parameter_;
  }
  parameter_ = NULL;
  ::memset(&lr_, 0, reinterpret_cast<char*>(&interval_) -
    reinterpret_cast<char*>(&lr_) + sizeof(interval_));
}

bool TuplePaLrItv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:adaptive_system.TuplePaLrItv)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.TensorProto parameter = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parameter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 interval = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adaptive_system.TuplePaLrItv)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adaptive_system.TuplePaLrItv)
  return false;
#undef DO_
}

void TuplePaLrItv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adaptive_system.TuplePaLrItv)
  // .tensorflow.TensorProto parameter = 1;
  if (this->has_parameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->parameter_, output);
  }

  // float lr = 2;
  if (this->lr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->lr(), output);
  }

  // int32 interval = 3;
  if (this->interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->interval(), output);
  }

  // @@protoc_insertion_point(serialize_end:adaptive_system.TuplePaLrItv)
}

::google::protobuf::uint8* TuplePaLrItv::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:adaptive_system.TuplePaLrItv)
  // .tensorflow.TensorProto parameter = 1;
  if (this->has_parameter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->parameter_, false, target);
  }

  // float lr = 2;
  if (this->lr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->lr(), target);
  }

  // int32 interval = 3;
  if (this->interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->interval(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:adaptive_system.TuplePaLrItv)
  return target;
}

size_t TuplePaLrItv::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adaptive_system.TuplePaLrItv)
  size_t total_size = 0;

  // .tensorflow.TensorProto parameter = 1;
  if (this->has_parameter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->parameter_);
  }

  // float lr = 2;
  if (this->lr() != 0) {
    total_size += 1 + 4;
  }

  // int32 interval = 3;
  if (this->interval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->interval());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TuplePaLrItv::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adaptive_system.TuplePaLrItv)
  GOOGLE_DCHECK_NE(&from, this);
  const TuplePaLrItv* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TuplePaLrItv>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adaptive_system.TuplePaLrItv)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adaptive_system.TuplePaLrItv)
    MergeFrom(*source);
  }
}

void TuplePaLrItv::MergeFrom(const TuplePaLrItv& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adaptive_system.TuplePaLrItv)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_parameter()) {
    mutable_parameter()->::tensorflow::TensorProto::MergeFrom(from.parameter());
  }
  if (from.lr() != 0) {
    set_lr(from.lr());
  }
  if (from.interval() != 0) {
    set_interval(from.interval());
  }
}

void TuplePaLrItv::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adaptive_system.TuplePaLrItv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TuplePaLrItv::CopyFrom(const TuplePaLrItv& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adaptive_system.TuplePaLrItv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TuplePaLrItv::IsInitialized() const {
  return true;
}

void TuplePaLrItv::Swap(TuplePaLrItv* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TuplePaLrItv::InternalSwap(TuplePaLrItv* other) {
  std::swap(parameter_, other->parameter_);
  std::swap(lr_, other->lr_);
  std::swap(interval_, other->interval_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TuplePaLrItv::GetMetadata() const {
  protobuf_rpc_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_5fservice_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TuplePaLrItv

// .tensorflow.TensorProto parameter = 1;
bool TuplePaLrItv::has_parameter() const {
  return this != internal_default_instance() && parameter_ != NULL;
}
void TuplePaLrItv::clear_parameter() {
  if (GetArenaNoVirtual() == NULL && parameter_ != NULL) delete parameter_;
  parameter_ = NULL;
}
const ::tensorflow::TensorProto& TuplePaLrItv::parameter() const {
  // @@protoc_insertion_point(field_get:adaptive_system.TuplePaLrItv.parameter)
  return parameter_ != NULL ? *parameter_
                         : *::tensorflow::TensorProto::internal_default_instance();
}
::tensorflow::TensorProto* TuplePaLrItv::mutable_parameter() {
  
  if (parameter_ == NULL) {
    parameter_ = new ::tensorflow::TensorProto;
  }
  // @@protoc_insertion_point(field_mutable:adaptive_system.TuplePaLrItv.parameter)
  return parameter_;
}
::tensorflow::TensorProto* TuplePaLrItv::release_parameter() {
  // @@protoc_insertion_point(field_release:adaptive_system.TuplePaLrItv.parameter)
  
  ::tensorflow::TensorProto* temp = parameter_;
  parameter_ = NULL;
  return temp;
}
void TuplePaLrItv::set_allocated_parameter(::tensorflow::TensorProto* parameter) {
  delete parameter_;
  if (parameter != NULL && parameter->GetArena() != NULL) {
    ::tensorflow::TensorProto* new_parameter = new ::tensorflow::TensorProto;
    new_parameter->CopyFrom(*parameter);
    parameter = new_parameter;
  }
  parameter_ = parameter;
  if (parameter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:adaptive_system.TuplePaLrItv.parameter)
}

// float lr = 2;
void TuplePaLrItv::clear_lr() {
  lr_ = 0;
}
float TuplePaLrItv::lr() const {
  // @@protoc_insertion_point(field_get:adaptive_system.TuplePaLrItv.lr)
  return lr_;
}
void TuplePaLrItv::set_lr(float value) {
  
  lr_ = value;
  // @@protoc_insertion_point(field_set:adaptive_system.TuplePaLrItv.lr)
}

// int32 interval = 3;
void TuplePaLrItv::clear_interval() {
  interval_ = 0;
}
::google::protobuf::int32 TuplePaLrItv::interval() const {
  // @@protoc_insertion_point(field_get:adaptive_system.TuplePaLrItv.interval)
  return interval_;
}
void TuplePaLrItv::set_interval(::google::protobuf::int32 value) {
  
  interval_ = value;
  // @@protoc_insertion_point(field_set:adaptive_system.TuplePaLrItv.interval)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuantizationLevel::kLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuantizationLevel::QuantizationLevel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:adaptive_system.QuantizationLevel)
}
QuantizationLevel::QuantizationLevel(const QuantizationLevel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  level_ = from.level_;
  // @@protoc_insertion_point(copy_constructor:adaptive_system.QuantizationLevel)
}

void QuantizationLevel::SharedCtor() {
  level_ = 0;
  _cached_size_ = 0;
}

QuantizationLevel::~QuantizationLevel() {
  // @@protoc_insertion_point(destructor:adaptive_system.QuantizationLevel)
  SharedDtor();
}

void QuantizationLevel::SharedDtor() {
}

void QuantizationLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuantizationLevel::descriptor() {
  protobuf_rpc_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_5fservice_2eproto::file_level_metadata[2].descriptor;
}

const QuantizationLevel& QuantizationLevel::default_instance() {
  protobuf_rpc_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

QuantizationLevel* QuantizationLevel::New(::google::protobuf::Arena* arena) const {
  QuantizationLevel* n = new QuantizationLevel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuantizationLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:adaptive_system.QuantizationLevel)
  level_ = 0;
}

bool QuantizationLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:adaptive_system.QuantizationLevel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .adaptive_system.GRAD_QUANT_LEVEL level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_level(static_cast< ::adaptive_system::GRAD_QUANT_LEVEL >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adaptive_system.QuantizationLevel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adaptive_system.QuantizationLevel)
  return false;
#undef DO_
}

void QuantizationLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adaptive_system.QuantizationLevel)
  // .adaptive_system.GRAD_QUANT_LEVEL level = 1;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->level(), output);
  }

  // @@protoc_insertion_point(serialize_end:adaptive_system.QuantizationLevel)
}

::google::protobuf::uint8* QuantizationLevel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:adaptive_system.QuantizationLevel)
  // .adaptive_system.GRAD_QUANT_LEVEL level = 1;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->level(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:adaptive_system.QuantizationLevel)
  return target;
}

size_t QuantizationLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adaptive_system.QuantizationLevel)
  size_t total_size = 0;

  // .adaptive_system.GRAD_QUANT_LEVEL level = 1;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuantizationLevel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adaptive_system.QuantizationLevel)
  GOOGLE_DCHECK_NE(&from, this);
  const QuantizationLevel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuantizationLevel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adaptive_system.QuantizationLevel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adaptive_system.QuantizationLevel)
    MergeFrom(*source);
  }
}

void QuantizationLevel::MergeFrom(const QuantizationLevel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adaptive_system.QuantizationLevel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.level() != 0) {
    set_level(from.level());
  }
}

void QuantizationLevel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adaptive_system.QuantizationLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuantizationLevel::CopyFrom(const QuantizationLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adaptive_system.QuantizationLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuantizationLevel::IsInitialized() const {
  return true;
}

void QuantizationLevel::Swap(QuantizationLevel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuantizationLevel::InternalSwap(QuantizationLevel* other) {
  std::swap(level_, other->level_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuantizationLevel::GetMetadata() const {
  protobuf_rpc_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_5fservice_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuantizationLevel

// .adaptive_system.GRAD_QUANT_LEVEL level = 1;
void QuantizationLevel::clear_level() {
  level_ = 0;
}
::adaptive_system::GRAD_QUANT_LEVEL QuantizationLevel::level() const {
  // @@protoc_insertion_point(field_get:adaptive_system.QuantizationLevel.level)
  return static_cast< ::adaptive_system::GRAD_QUANT_LEVEL >(level_);
}
void QuantizationLevel::set_level(::adaptive_system::GRAD_QUANT_LEVEL value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:adaptive_system.QuantizationLevel.level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gradient::kLevelFieldNumber;
const int Gradient::kTensorGe8FieldNumber;
const int Gradient::kTensorLe8FieldNumber;
const int Gradient::kMaxFieldNumber;
const int Gradient::kMinFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gradient::Gradient()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:adaptive_system.Gradient)
}
Gradient::Gradient(const Gradient& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tensor_le_8_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tensor_le_8().size() > 0) {
    tensor_le_8_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tensor_le_8_);
  }
  if (from.has_tensor_ge_8()) {
    tensor_ge_8_ = new ::tensorflow::TensorProto(*from.tensor_ge_8_);
  } else {
    tensor_ge_8_ = NULL;
  }
  ::memcpy(&level_, &from.level_,
    reinterpret_cast<char*>(&min_) -
    reinterpret_cast<char*>(&level_) + sizeof(min_));
  // @@protoc_insertion_point(copy_constructor:adaptive_system.Gradient)
}

void Gradient::SharedCtor() {
  tensor_le_8_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tensor_ge_8_, 0, reinterpret_cast<char*>(&min_) -
    reinterpret_cast<char*>(&tensor_ge_8_) + sizeof(min_));
  _cached_size_ = 0;
}

Gradient::~Gradient() {
  // @@protoc_insertion_point(destructor:adaptive_system.Gradient)
  SharedDtor();
}

void Gradient::SharedDtor() {
  tensor_le_8_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete tensor_ge_8_;
  }
}

void Gradient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gradient::descriptor() {
  protobuf_rpc_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_5fservice_2eproto::file_level_metadata[3].descriptor;
}

const Gradient& Gradient::default_instance() {
  protobuf_rpc_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

Gradient* Gradient::New(::google::protobuf::Arena* arena) const {
  Gradient* n = new Gradient;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gradient::Clear() {
// @@protoc_insertion_point(message_clear_start:adaptive_system.Gradient)
  tensor_le_8_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && tensor_ge_8_ != NULL) {
    delete tensor_ge_8_;
  }
  tensor_ge_8_ = NULL;
  ::memset(&level_, 0, reinterpret_cast<char*>(&min_) -
    reinterpret_cast<char*>(&level_) + sizeof(min_));
}

bool Gradient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:adaptive_system.Gradient)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .adaptive_system.GRAD_QUANT_LEVEL level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_level(static_cast< ::adaptive_system::GRAD_QUANT_LEVEL >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.TensorProto tensor_ge_8 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tensor_ge_8()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes tensor_le_8 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tensor_le_8()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float max = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float min = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adaptive_system.Gradient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adaptive_system.Gradient)
  return false;
#undef DO_
}

void Gradient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adaptive_system.Gradient)
  // .adaptive_system.GRAD_QUANT_LEVEL level = 1;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->level(), output);
  }

  // .tensorflow.TensorProto tensor_ge_8 = 2;
  if (this->has_tensor_ge_8()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->tensor_ge_8_, output);
  }

  // bytes tensor_le_8 = 3;
  if (this->tensor_le_8().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->tensor_le_8(), output);
  }

  // float max = 4;
  if (this->max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->max(), output);
  }

  // float min = 5;
  if (this->min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->min(), output);
  }

  // @@protoc_insertion_point(serialize_end:adaptive_system.Gradient)
}

::google::protobuf::uint8* Gradient::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:adaptive_system.Gradient)
  // .adaptive_system.GRAD_QUANT_LEVEL level = 1;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->level(), target);
  }

  // .tensorflow.TensorProto tensor_ge_8 = 2;
  if (this->has_tensor_ge_8()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->tensor_ge_8_, false, target);
  }

  // bytes tensor_le_8 = 3;
  if (this->tensor_le_8().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->tensor_le_8(), target);
  }

  // float max = 4;
  if (this->max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->max(), target);
  }

  // float min = 5;
  if (this->min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->min(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:adaptive_system.Gradient)
  return target;
}

size_t Gradient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adaptive_system.Gradient)
  size_t total_size = 0;

  // bytes tensor_le_8 = 3;
  if (this->tensor_le_8().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->tensor_le_8());
  }

  // .tensorflow.TensorProto tensor_ge_8 = 2;
  if (this->has_tensor_ge_8()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tensor_ge_8_);
  }

  // .adaptive_system.GRAD_QUANT_LEVEL level = 1;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->level());
  }

  // float max = 4;
  if (this->max() != 0) {
    total_size += 1 + 4;
  }

  // float min = 5;
  if (this->min() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gradient::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adaptive_system.Gradient)
  GOOGLE_DCHECK_NE(&from, this);
  const Gradient* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gradient>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adaptive_system.Gradient)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adaptive_system.Gradient)
    MergeFrom(*source);
  }
}

void Gradient::MergeFrom(const Gradient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adaptive_system.Gradient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.tensor_le_8().size() > 0) {

    tensor_le_8_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tensor_le_8_);
  }
  if (from.has_tensor_ge_8()) {
    mutable_tensor_ge_8()->::tensorflow::TensorProto::MergeFrom(from.tensor_ge_8());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.max() != 0) {
    set_max(from.max());
  }
  if (from.min() != 0) {
    set_min(from.min());
  }
}

void Gradient::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adaptive_system.Gradient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gradient::CopyFrom(const Gradient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adaptive_system.Gradient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gradient::IsInitialized() const {
  return true;
}

void Gradient::Swap(Gradient* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gradient::InternalSwap(Gradient* other) {
  tensor_le_8_.Swap(&other->tensor_le_8_);
  std::swap(tensor_ge_8_, other->tensor_ge_8_);
  std::swap(level_, other->level_);
  std::swap(max_, other->max_);
  std::swap(min_, other->min_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gradient::GetMetadata() const {
  protobuf_rpc_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_5fservice_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Gradient

// .adaptive_system.GRAD_QUANT_LEVEL level = 1;
void Gradient::clear_level() {
  level_ = 0;
}
::adaptive_system::GRAD_QUANT_LEVEL Gradient::level() const {
  // @@protoc_insertion_point(field_get:adaptive_system.Gradient.level)
  return static_cast< ::adaptive_system::GRAD_QUANT_LEVEL >(level_);
}
void Gradient::set_level(::adaptive_system::GRAD_QUANT_LEVEL value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:adaptive_system.Gradient.level)
}

// .tensorflow.TensorProto tensor_ge_8 = 2;
bool Gradient::has_tensor_ge_8() const {
  return this != internal_default_instance() && tensor_ge_8_ != NULL;
}
void Gradient::clear_tensor_ge_8() {
  if (GetArenaNoVirtual() == NULL && tensor_ge_8_ != NULL) delete tensor_ge_8_;
  tensor_ge_8_ = NULL;
}
const ::tensorflow::TensorProto& Gradient::tensor_ge_8() const {
  // @@protoc_insertion_point(field_get:adaptive_system.Gradient.tensor_ge_8)
  return tensor_ge_8_ != NULL ? *tensor_ge_8_
                         : *::tensorflow::TensorProto::internal_default_instance();
}
::tensorflow::TensorProto* Gradient::mutable_tensor_ge_8() {
  
  if (tensor_ge_8_ == NULL) {
    tensor_ge_8_ = new ::tensorflow::TensorProto;
  }
  // @@protoc_insertion_point(field_mutable:adaptive_system.Gradient.tensor_ge_8)
  return tensor_ge_8_;
}
::tensorflow::TensorProto* Gradient::release_tensor_ge_8() {
  // @@protoc_insertion_point(field_release:adaptive_system.Gradient.tensor_ge_8)
  
  ::tensorflow::TensorProto* temp = tensor_ge_8_;
  tensor_ge_8_ = NULL;
  return temp;
}
void Gradient::set_allocated_tensor_ge_8(::tensorflow::TensorProto* tensor_ge_8) {
  delete tensor_ge_8_;
  if (tensor_ge_8 != NULL && tensor_ge_8->GetArena() != NULL) {
    ::tensorflow::TensorProto* new_tensor_ge_8 = new ::tensorflow::TensorProto;
    new_tensor_ge_8->CopyFrom(*tensor_ge_8);
    tensor_ge_8 = new_tensor_ge_8;
  }
  tensor_ge_8_ = tensor_ge_8;
  if (tensor_ge_8) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:adaptive_system.Gradient.tensor_ge_8)
}

// bytes tensor_le_8 = 3;
void Gradient::clear_tensor_le_8() {
  tensor_le_8_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Gradient::tensor_le_8() const {
  // @@protoc_insertion_point(field_get:adaptive_system.Gradient.tensor_le_8)
  return tensor_le_8_.GetNoArena();
}
void Gradient::set_tensor_le_8(const ::std::string& value) {
  
  tensor_le_8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:adaptive_system.Gradient.tensor_le_8)
}
#if LANG_CXX11
void Gradient::set_tensor_le_8(::std::string&& value) {
  
  tensor_le_8_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:adaptive_system.Gradient.tensor_le_8)
}
#endif
void Gradient::set_tensor_le_8(const char* value) {
  
  tensor_le_8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:adaptive_system.Gradient.tensor_le_8)
}
void Gradient::set_tensor_le_8(const void* value, size_t size) {
  
  tensor_le_8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:adaptive_system.Gradient.tensor_le_8)
}
::std::string* Gradient::mutable_tensor_le_8() {
  
  // @@protoc_insertion_point(field_mutable:adaptive_system.Gradient.tensor_le_8)
  return tensor_le_8_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Gradient::release_tensor_le_8() {
  // @@protoc_insertion_point(field_release:adaptive_system.Gradient.tensor_le_8)
  
  return tensor_le_8_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Gradient::set_allocated_tensor_le_8(::std::string* tensor_le_8) {
  if (tensor_le_8 != NULL) {
    
  } else {
    
  }
  tensor_le_8_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tensor_le_8);
  // @@protoc_insertion_point(field_set_allocated:adaptive_system.Gradient.tensor_le_8)
}

// float max = 4;
void Gradient::clear_max() {
  max_ = 0;
}
float Gradient::max() const {
  // @@protoc_insertion_point(field_get:adaptive_system.Gradient.max)
  return max_;
}
void Gradient::set_max(float value) {
  
  max_ = value;
  // @@protoc_insertion_point(field_set:adaptive_system.Gradient.max)
}

// float min = 5;
void Gradient::clear_min() {
  min_ = 0;
}
float Gradient::min() const {
  // @@protoc_insertion_point(field_get:adaptive_system.Gradient.min)
  return min_;
}
void Gradient::set_min(float value) {
  
  min_ = value;
  // @@protoc_insertion_point(field_set:adaptive_system.Gradient.min)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PartialState::kTensorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PartialState::PartialState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:adaptive_system.PartialState)
}
PartialState::PartialState(const PartialState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tensor()) {
    tensor_ = new ::tensorflow::TensorProto(*from.tensor_);
  } else {
    tensor_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:adaptive_system.PartialState)
}

void PartialState::SharedCtor() {
  tensor_ = NULL;
  _cached_size_ = 0;
}

PartialState::~PartialState() {
  // @@protoc_insertion_point(destructor:adaptive_system.PartialState)
  SharedDtor();
}

void PartialState::SharedDtor() {
  if (this != internal_default_instance()) {
    delete tensor_;
  }
}

void PartialState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PartialState::descriptor() {
  protobuf_rpc_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_5fservice_2eproto::file_level_metadata[4].descriptor;
}

const PartialState& PartialState::default_instance() {
  protobuf_rpc_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

PartialState* PartialState::New(::google::protobuf::Arena* arena) const {
  PartialState* n = new PartialState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PartialState::Clear() {
// @@protoc_insertion_point(message_clear_start:adaptive_system.PartialState)
  if (GetArenaNoVirtual() == NULL && tensor_ != NULL) {
    delete tensor_;
  }
  tensor_ = NULL;
}

bool PartialState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:adaptive_system.PartialState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.TensorProto tensor = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tensor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adaptive_system.PartialState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adaptive_system.PartialState)
  return false;
#undef DO_
}

void PartialState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adaptive_system.PartialState)
  // .tensorflow.TensorProto tensor = 1;
  if (this->has_tensor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->tensor_, output);
  }

  // @@protoc_insertion_point(serialize_end:adaptive_system.PartialState)
}

::google::protobuf::uint8* PartialState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:adaptive_system.PartialState)
  // .tensorflow.TensorProto tensor = 1;
  if (this->has_tensor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->tensor_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:adaptive_system.PartialState)
  return target;
}

size_t PartialState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adaptive_system.PartialState)
  size_t total_size = 0;

  // .tensorflow.TensorProto tensor = 1;
  if (this->has_tensor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tensor_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PartialState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adaptive_system.PartialState)
  GOOGLE_DCHECK_NE(&from, this);
  const PartialState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PartialState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adaptive_system.PartialState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adaptive_system.PartialState)
    MergeFrom(*source);
  }
}

void PartialState::MergeFrom(const PartialState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adaptive_system.PartialState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tensor()) {
    mutable_tensor()->::tensorflow::TensorProto::MergeFrom(from.tensor());
  }
}

void PartialState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adaptive_system.PartialState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartialState::CopyFrom(const PartialState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adaptive_system.PartialState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartialState::IsInitialized() const {
  return true;
}

void PartialState::Swap(PartialState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PartialState::InternalSwap(PartialState* other) {
  std::swap(tensor_, other->tensor_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PartialState::GetMetadata() const {
  protobuf_rpc_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_5fservice_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PartialState

// .tensorflow.TensorProto tensor = 1;
bool PartialState::has_tensor() const {
  return this != internal_default_instance() && tensor_ != NULL;
}
void PartialState::clear_tensor() {
  if (GetArenaNoVirtual() == NULL && tensor_ != NULL) delete tensor_;
  tensor_ = NULL;
}
const ::tensorflow::TensorProto& PartialState::tensor() const {
  // @@protoc_insertion_point(field_get:adaptive_system.PartialState.tensor)
  return tensor_ != NULL ? *tensor_
                         : *::tensorflow::TensorProto::internal_default_instance();
}
::tensorflow::TensorProto* PartialState::mutable_tensor() {
  
  if (tensor_ == NULL) {
    tensor_ = new ::tensorflow::TensorProto;
  }
  // @@protoc_insertion_point(field_mutable:adaptive_system.PartialState.tensor)
  return tensor_;
}
::tensorflow::TensorProto* PartialState::release_tensor() {
  // @@protoc_insertion_point(field_release:adaptive_system.PartialState.tensor)
  
  ::tensorflow::TensorProto* temp = tensor_;
  tensor_ = NULL;
  return temp;
}
void PartialState::set_allocated_tensor(::tensorflow::TensorProto* tensor) {
  delete tensor_;
  if (tensor != NULL && tensor->GetArena() != NULL) {
    ::tensorflow::TensorProto* new_tensor = new ::tensorflow::TensorProto;
    new_tensor->CopyFrom(*tensor);
    tensor = new_tensor;
  }
  tensor_ = tensor;
  if (tensor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:adaptive_system.PartialState.tensor)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GradientAndLoss::kGradFieldNumber;
const int GradientAndLoss::kLossFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GradientAndLoss::GradientAndLoss()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:adaptive_system.GradientAndLoss)
}
GradientAndLoss::GradientAndLoss(const GradientAndLoss& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_grad()) {
    grad_ = new ::adaptive_system::Gradient(*from.grad_);
  } else {
    grad_ = NULL;
  }
  loss_ = from.loss_;
  // @@protoc_insertion_point(copy_constructor:adaptive_system.GradientAndLoss)
}

void GradientAndLoss::SharedCtor() {
  ::memset(&grad_, 0, reinterpret_cast<char*>(&loss_) -
    reinterpret_cast<char*>(&grad_) + sizeof(loss_));
  _cached_size_ = 0;
}

GradientAndLoss::~GradientAndLoss() {
  // @@protoc_insertion_point(destructor:adaptive_system.GradientAndLoss)
  SharedDtor();
}

void GradientAndLoss::SharedDtor() {
  if (this != internal_default_instance()) {
    delete grad_;
  }
}

void GradientAndLoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GradientAndLoss::descriptor() {
  protobuf_rpc_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_5fservice_2eproto::file_level_metadata[5].descriptor;
}

const GradientAndLoss& GradientAndLoss::default_instance() {
  protobuf_rpc_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

GradientAndLoss* GradientAndLoss::New(::google::protobuf::Arena* arena) const {
  GradientAndLoss* n = new GradientAndLoss;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GradientAndLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:adaptive_system.GradientAndLoss)
  if (GetArenaNoVirtual() == NULL && grad_ != NULL) {
    delete grad_;
  }
  grad_ = NULL;
  loss_ = 0;
}

bool GradientAndLoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:adaptive_system.GradientAndLoss)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .adaptive_system.Gradient grad = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grad()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float loss = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &loss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adaptive_system.GradientAndLoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adaptive_system.GradientAndLoss)
  return false;
#undef DO_
}

void GradientAndLoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adaptive_system.GradientAndLoss)
  // .adaptive_system.Gradient grad = 1;
  if (this->has_grad()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->grad_, output);
  }

  // float loss = 2;
  if (this->loss() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->loss(), output);
  }

  // @@protoc_insertion_point(serialize_end:adaptive_system.GradientAndLoss)
}

::google::protobuf::uint8* GradientAndLoss::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:adaptive_system.GradientAndLoss)
  // .adaptive_system.Gradient grad = 1;
  if (this->has_grad()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->grad_, false, target);
  }

  // float loss = 2;
  if (this->loss() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->loss(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:adaptive_system.GradientAndLoss)
  return target;
}

size_t GradientAndLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adaptive_system.GradientAndLoss)
  size_t total_size = 0;

  // .adaptive_system.Gradient grad = 1;
  if (this->has_grad()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->grad_);
  }

  // float loss = 2;
  if (this->loss() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GradientAndLoss::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adaptive_system.GradientAndLoss)
  GOOGLE_DCHECK_NE(&from, this);
  const GradientAndLoss* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GradientAndLoss>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adaptive_system.GradientAndLoss)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adaptive_system.GradientAndLoss)
    MergeFrom(*source);
  }
}

void GradientAndLoss::MergeFrom(const GradientAndLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adaptive_system.GradientAndLoss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_grad()) {
    mutable_grad()->::adaptive_system::Gradient::MergeFrom(from.grad());
  }
  if (from.loss() != 0) {
    set_loss(from.loss());
  }
}

void GradientAndLoss::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adaptive_system.GradientAndLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GradientAndLoss::CopyFrom(const GradientAndLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adaptive_system.GradientAndLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GradientAndLoss::IsInitialized() const {
  return true;
}

void GradientAndLoss::Swap(GradientAndLoss* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GradientAndLoss::InternalSwap(GradientAndLoss* other) {
  std::swap(grad_, other->grad_);
  std::swap(loss_, other->loss_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GradientAndLoss::GetMetadata() const {
  protobuf_rpc_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_5fservice_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GradientAndLoss

// .adaptive_system.Gradient grad = 1;
bool GradientAndLoss::has_grad() const {
  return this != internal_default_instance() && grad_ != NULL;
}
void GradientAndLoss::clear_grad() {
  if (GetArenaNoVirtual() == NULL && grad_ != NULL) delete grad_;
  grad_ = NULL;
}
const ::adaptive_system::Gradient& GradientAndLoss::grad() const {
  // @@protoc_insertion_point(field_get:adaptive_system.GradientAndLoss.grad)
  return grad_ != NULL ? *grad_
                         : *::adaptive_system::Gradient::internal_default_instance();
}
::adaptive_system::Gradient* GradientAndLoss::mutable_grad() {
  
  if (grad_ == NULL) {
    grad_ = new ::adaptive_system::Gradient;
  }
  // @@protoc_insertion_point(field_mutable:adaptive_system.GradientAndLoss.grad)
  return grad_;
}
::adaptive_system::Gradient* GradientAndLoss::release_grad() {
  // @@protoc_insertion_point(field_release:adaptive_system.GradientAndLoss.grad)
  
  ::adaptive_system::Gradient* temp = grad_;
  grad_ = NULL;
  return temp;
}
void GradientAndLoss::set_allocated_grad(::adaptive_system::Gradient* grad) {
  delete grad_;
  grad_ = grad;
  if (grad) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:adaptive_system.GradientAndLoss.grad)
}

// float loss = 2;
void GradientAndLoss::clear_loss() {
  loss_ = 0;
}
float GradientAndLoss::loss() const {
  // @@protoc_insertion_point(field_get:adaptive_system.GradientAndLoss.loss)
  return loss_;
}
void GradientAndLoss::set_loss(float value) {
  
  loss_ = value;
  // @@protoc_insertion_point(field_set:adaptive_system.GradientAndLoss.loss)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PartialStateAndLoss::kPsFieldNumber;
const int PartialStateAndLoss::kLossFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PartialStateAndLoss::PartialStateAndLoss()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:adaptive_system.PartialStateAndLoss)
}
PartialStateAndLoss::PartialStateAndLoss(const PartialStateAndLoss& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ps()) {
    ps_ = new ::adaptive_system::PartialState(*from.ps_);
  } else {
    ps_ = NULL;
  }
  loss_ = from.loss_;
  // @@protoc_insertion_point(copy_constructor:adaptive_system.PartialStateAndLoss)
}

void PartialStateAndLoss::SharedCtor() {
  ::memset(&ps_, 0, reinterpret_cast<char*>(&loss_) -
    reinterpret_cast<char*>(&ps_) + sizeof(loss_));
  _cached_size_ = 0;
}

PartialStateAndLoss::~PartialStateAndLoss() {
  // @@protoc_insertion_point(destructor:adaptive_system.PartialStateAndLoss)
  SharedDtor();
}

void PartialStateAndLoss::SharedDtor() {
  if (this != internal_default_instance()) {
    delete ps_;
  }
}

void PartialStateAndLoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PartialStateAndLoss::descriptor() {
  protobuf_rpc_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_5fservice_2eproto::file_level_metadata[6].descriptor;
}

const PartialStateAndLoss& PartialStateAndLoss::default_instance() {
  protobuf_rpc_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

PartialStateAndLoss* PartialStateAndLoss::New(::google::protobuf::Arena* arena) const {
  PartialStateAndLoss* n = new PartialStateAndLoss;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PartialStateAndLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:adaptive_system.PartialStateAndLoss)
  if (GetArenaNoVirtual() == NULL && ps_ != NULL) {
    delete ps_;
  }
  ps_ = NULL;
  loss_ = 0;
}

bool PartialStateAndLoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:adaptive_system.PartialStateAndLoss)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .adaptive_system.PartialState ps = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float loss = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &loss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adaptive_system.PartialStateAndLoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adaptive_system.PartialStateAndLoss)
  return false;
#undef DO_
}

void PartialStateAndLoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adaptive_system.PartialStateAndLoss)
  // .adaptive_system.PartialState ps = 1;
  if (this->has_ps()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->ps_, output);
  }

  // float loss = 2;
  if (this->loss() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->loss(), output);
  }

  // @@protoc_insertion_point(serialize_end:adaptive_system.PartialStateAndLoss)
}

::google::protobuf::uint8* PartialStateAndLoss::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:adaptive_system.PartialStateAndLoss)
  // .adaptive_system.PartialState ps = 1;
  if (this->has_ps()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->ps_, false, target);
  }

  // float loss = 2;
  if (this->loss() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->loss(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:adaptive_system.PartialStateAndLoss)
  return target;
}

size_t PartialStateAndLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adaptive_system.PartialStateAndLoss)
  size_t total_size = 0;

  // .adaptive_system.PartialState ps = 1;
  if (this->has_ps()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ps_);
  }

  // float loss = 2;
  if (this->loss() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PartialStateAndLoss::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adaptive_system.PartialStateAndLoss)
  GOOGLE_DCHECK_NE(&from, this);
  const PartialStateAndLoss* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PartialStateAndLoss>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adaptive_system.PartialStateAndLoss)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adaptive_system.PartialStateAndLoss)
    MergeFrom(*source);
  }
}

void PartialStateAndLoss::MergeFrom(const PartialStateAndLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adaptive_system.PartialStateAndLoss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ps()) {
    mutable_ps()->::adaptive_system::PartialState::MergeFrom(from.ps());
  }
  if (from.loss() != 0) {
    set_loss(from.loss());
  }
}

void PartialStateAndLoss::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adaptive_system.PartialStateAndLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartialStateAndLoss::CopyFrom(const PartialStateAndLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adaptive_system.PartialStateAndLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartialStateAndLoss::IsInitialized() const {
  return true;
}

void PartialStateAndLoss::Swap(PartialStateAndLoss* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PartialStateAndLoss::InternalSwap(PartialStateAndLoss* other) {
  std::swap(ps_, other->ps_);
  std::swap(loss_, other->loss_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PartialStateAndLoss::GetMetadata() const {
  protobuf_rpc_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_5fservice_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PartialStateAndLoss

// .adaptive_system.PartialState ps = 1;
bool PartialStateAndLoss::has_ps() const {
  return this != internal_default_instance() && ps_ != NULL;
}
void PartialStateAndLoss::clear_ps() {
  if (GetArenaNoVirtual() == NULL && ps_ != NULL) delete ps_;
  ps_ = NULL;
}
const ::adaptive_system::PartialState& PartialStateAndLoss::ps() const {
  // @@protoc_insertion_point(field_get:adaptive_system.PartialStateAndLoss.ps)
  return ps_ != NULL ? *ps_
                         : *::adaptive_system::PartialState::internal_default_instance();
}
::adaptive_system::PartialState* PartialStateAndLoss::mutable_ps() {
  
  if (ps_ == NULL) {
    ps_ = new ::adaptive_system::PartialState;
  }
  // @@protoc_insertion_point(field_mutable:adaptive_system.PartialStateAndLoss.ps)
  return ps_;
}
::adaptive_system::PartialState* PartialStateAndLoss::release_ps() {
  // @@protoc_insertion_point(field_release:adaptive_system.PartialStateAndLoss.ps)
  
  ::adaptive_system::PartialState* temp = ps_;
  ps_ = NULL;
  return temp;
}
void PartialStateAndLoss::set_allocated_ps(::adaptive_system::PartialState* ps) {
  delete ps_;
  ps_ = ps;
  if (ps) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:adaptive_system.PartialStateAndLoss.ps)
}

// float loss = 2;
void PartialStateAndLoss::clear_loss() {
  loss_ = 0;
}
float PartialStateAndLoss::loss() const {
  // @@protoc_insertion_point(field_get:adaptive_system.PartialStateAndLoss.loss)
  return loss_;
}
void PartialStateAndLoss::set_loss(float value) {
  
  loss_ = value;
  // @@protoc_insertion_point(field_set:adaptive_system.PartialStateAndLoss.loss)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace adaptive_system

// @@protoc_insertion_point(global_scope)
